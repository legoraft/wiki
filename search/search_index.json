{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home This wiki is mostly a personal way to store things I learn and find over time, without having to scour the web to find one thing I had found 2 years ago. Most of my wiki is about linux and selfhosting, as I run linux on most of my personal machines and selfhost some services.","title":"Home"},{"location":"#home","text":"This wiki is mostly a personal way to store things I learn and find over time, without having to scour the web to find one thing I had found 2 years ago. Most of my wiki is about linux and selfhosting, as I run linux on most of my personal machines and selfhost some services.","title":"Home"},{"location":"about/","text":"About I'm Legoraft, someone who likes to play games and tinker around with computers. I try to self host some services I like and try to make my linux install as pretty and efficient as possible. I'm currently daily driving pop os, which is still on Ubuntu 22.04, but I'm planning on switching to Debian testing in the near future. My server does run Debian stable and runs some other services I self host. Projects I also do some programming, which you can see on my github . I also host this wiki on github. I'm currently maintaining two minecraft mods and am also learning rust to make some desktop programs in the future. This wiki is also a project by itself, I'm trying to consolidate all the info I maybe need at some point inside of this wiki.","title":"About"},{"location":"about/#about","text":"I'm Legoraft, someone who likes to play games and tinker around with computers. I try to self host some services I like and try to make my linux install as pretty and efficient as possible. I'm currently daily driving pop os, which is still on Ubuntu 22.04, but I'm planning on switching to Debian testing in the near future. My server does run Debian stable and runs some other services I self host.","title":"About"},{"location":"about/#projects","text":"I also do some programming, which you can see on my github . I also host this wiki on github. I'm currently maintaining two minecraft mods and am also learning rust to make some desktop programs in the future. This wiki is also a project by itself, I'm trying to consolidate all the info I maybe need at some point inside of this wiki.","title":"Projects"},{"location":"command-line/mkvtoolnix/","text":"Mkvtoolnix Mkvtoolnix is a commandline tool which allows you to modify mkv files and extract from or merge other files with. I use mkvtoolnix to edit the movies that go into my media library. This is a quick overview of commands I use frequently. Mkvextract With mkvextract you can extract certain tracks from mkv files. The most simple usage of this is as follows: mkvextract <filename> tracks 0:video 1:audio 2:subtitles In this command, the numbers are the track numbers. You can get these with mkvmerge . You can rename the extracted files by adjusting the name after the number. For example: 2:\"Hello, world!.txt\" would generate a file that's called Hello, world!.txt from the mkv. Do keep an eye on the format of the files, because you can't really have videos with a .txt extension. Mkvmerge With mkvmerge, you can merge files within an mkv container. It also has a --identify flag, which allows you to get track numbers you might use for mkvextract or mkvmerge itself. This can be done by running a simple command: mkvmerge --identify <filename> To merge files with mkvmerge, you can use the -o flag to specify and output file and just add your files after. mkvmerge -o example-movie.mkv example-video.avi example-audio.ogg You can also specify the language for a certain file, for example the previous command would be adjusted as follows: mkvmerge -o example-movie.mkv example-video.avi --language 0:en example-audio.ogg The language just uses a two character language code. You can do a lot more with mkvtoolnix, check out the full documentation on their site .","title":"Mkvtoolnix"},{"location":"command-line/mkvtoolnix/#mkvtoolnix","text":"Mkvtoolnix is a commandline tool which allows you to modify mkv files and extract from or merge other files with. I use mkvtoolnix to edit the movies that go into my media library. This is a quick overview of commands I use frequently.","title":"Mkvtoolnix"},{"location":"command-line/mkvtoolnix/#mkvextract","text":"With mkvextract you can extract certain tracks from mkv files. The most simple usage of this is as follows: mkvextract <filename> tracks 0:video 1:audio 2:subtitles In this command, the numbers are the track numbers. You can get these with mkvmerge . You can rename the extracted files by adjusting the name after the number. For example: 2:\"Hello, world!.txt\" would generate a file that's called Hello, world!.txt from the mkv. Do keep an eye on the format of the files, because you can't really have videos with a .txt extension.","title":"Mkvextract"},{"location":"command-line/mkvtoolnix/#mkvmerge","text":"With mkvmerge, you can merge files within an mkv container. It also has a --identify flag, which allows you to get track numbers you might use for mkvextract or mkvmerge itself. This can be done by running a simple command: mkvmerge --identify <filename> To merge files with mkvmerge, you can use the -o flag to specify and output file and just add your files after. mkvmerge -o example-movie.mkv example-video.avi example-audio.ogg You can also specify the language for a certain file, for example the previous command would be adjusted as follows: mkvmerge -o example-movie.mkv example-video.avi --language 0:en example-audio.ogg The language just uses a two character language code. You can do a lot more with mkvtoolnix, check out the full documentation on their site .","title":"Mkvmerge"},{"location":"command-line/rename/","text":"Rename Rename is a commandline tool that let's you rename files in bulk. It isn't installed by default on most distributions, so you'll need to install the rename package for your distro. Replace string It's syntax utilizes regex, which is quite easy to find out with regex101 . To get simple find and replace functionality, you can use this command: rename 's/foo/bar/g' *.txt This command has a certain syntax after the rename command, which I'll break down: s indicates that you're substituting foo can be replaced by any string you'd want to search for bar is the string that replaces foo g indicates that it won't stop after the first hit. *.txt can be replaced by any filename or extension to filter the replacements. Replace characters Rename also has another mode with which you can replace characters or a string of characters. The syntax for this is as follows: rename 'y/abc/xyz/g' *.txt In this, the y indicates that you want to translate character for character. In this example, every \"a\" will be replaced by an \"x\", every \"b\" for a \"y\" and so on.","title":"Rename"},{"location":"command-line/rename/#rename","text":"Rename is a commandline tool that let's you rename files in bulk. It isn't installed by default on most distributions, so you'll need to install the rename package for your distro.","title":"Rename"},{"location":"command-line/rename/#replace-string","text":"It's syntax utilizes regex, which is quite easy to find out with regex101 . To get simple find and replace functionality, you can use this command: rename 's/foo/bar/g' *.txt This command has a certain syntax after the rename command, which I'll break down: s indicates that you're substituting foo can be replaced by any string you'd want to search for bar is the string that replaces foo g indicates that it won't stop after the first hit. *.txt can be replaced by any filename or extension to filter the replacements.","title":"Replace string"},{"location":"command-line/rename/#replace-characters","text":"Rename also has another mode with which you can replace characters or a string of characters. The syntax for this is as follows: rename 'y/abc/xyz/g' *.txt In this, the y indicates that you want to translate character for character. In this example, every \"a\" will be replaced by an \"x\", every \"b\" for a \"y\" and so on.","title":"Replace characters"},{"location":"linux/debian/","text":"Debian This is a wiki page about Debian . I am aiming to use this distro for personal use, but I'm using it for my servers currently. To use it for a server without a monitor, you have to preseed it, which is a somewhat difficult process. I've documented it in this wiki.","title":"Debian"},{"location":"linux/debian/#debian","text":"This is a wiki page about Debian . I am aiming to use this distro for personal use, but I'm using it for my servers currently. To use it for a server without a monitor, you have to preseed it, which is a somewhat difficult process. I've documented it in this wiki.","title":"Debian"},{"location":"minecraft/nether-portal/","text":"Nether portals Nether portals are used in Minecraft to travel between the nether and the overworld. In the nether every block traveled is 8 blocks horizontally, so you can use the nether to travel faster in the overworld. 2-in-1 portal Besides traveling fast, you can also do something funky with a nether portal: You can create a single portal that teleports you to two locations in the overworld. I've written this out in case it's ever helpful. So let's start with 2 portals at random locations in the overworld. We have a portal A at (ax, ay, az). We have a portal B at (bx, by, bz). We'd want to connect these with another portal in the nether. You also need the blocks on which you stand in the portal in the nether to access the portals in the overworld, so we have the following: Portal A (ax, ay, az) Portal B (bx, by, bz) Block access A (block N) (nx, ny, nz) Block access B (block M) (mx, my, mz) Your nether portal will link with the center portal in the nether if the following statements are true: (8nx-ax)\u00b2 + (ny-ay)\u00b2 + (8nz-az)\u00b2 < (8nx-bx)\u00b2 + (ny-by)\u00b2 + (8nz-bz)\u00b2 (8mx-bx)\u00b2 + (my-by)\u00b2 + (8mz-bz)\u00b2 < (8mx-ax)\u00b2 + (my-ay)\u00b2 + (8mz-az)\u00b2 In these equations it distills to N is closer to A than to B and M is closer to B than A. If you'd want to make the calculations simpler, you can try to have one coordinate to be the same, this way you can remove any statement with that coordinate in it.","title":"Nether portals"},{"location":"minecraft/nether-portal/#nether-portals","text":"Nether portals are used in Minecraft to travel between the nether and the overworld. In the nether every block traveled is 8 blocks horizontally, so you can use the nether to travel faster in the overworld.","title":"Nether portals"},{"location":"minecraft/nether-portal/#2-in-1-portal","text":"Besides traveling fast, you can also do something funky with a nether portal: You can create a single portal that teleports you to two locations in the overworld. I've written this out in case it's ever helpful. So let's start with 2 portals at random locations in the overworld. We have a portal A at (ax, ay, az). We have a portal B at (bx, by, bz). We'd want to connect these with another portal in the nether. You also need the blocks on which you stand in the portal in the nether to access the portals in the overworld, so we have the following: Portal A (ax, ay, az) Portal B (bx, by, bz) Block access A (block N) (nx, ny, nz) Block access B (block M) (mx, my, mz) Your nether portal will link with the center portal in the nether if the following statements are true: (8nx-ax)\u00b2 + (ny-ay)\u00b2 + (8nz-az)\u00b2 < (8nx-bx)\u00b2 + (ny-by)\u00b2 + (8nz-bz)\u00b2 (8mx-bx)\u00b2 + (my-by)\u00b2 + (8mz-bz)\u00b2 < (8mx-ax)\u00b2 + (my-ay)\u00b2 + (8mz-az)\u00b2 In these equations it distills to N is closer to A than to B and M is closer to B than A. If you'd want to make the calculations simpler, you can try to have one coordinate to be the same, this way you can remove any statement with that coordinate in it.","title":"2-in-1 portal"},{"location":"servers/info/","text":"Info I have a small homelab setup with a minecraft server and a jellyfin server. On these pages you can find some info on how I run my servers and what I do to manage them and use them. Managing I manage my servers through a vpn, which prevents management tools being exposed to the internet. Some of the services I run are exposed to the internet, but through a reverse proxy for added security. I've set up this reverse proxy with Nginx , which is quite simple and allows https.","title":"Info"},{"location":"servers/info/#info","text":"I have a small homelab setup with a minecraft server and a jellyfin server. On these pages you can find some info on how I run my servers and what I do to manage them and use them.","title":"Info"},{"location":"servers/info/#managing","text":"I manage my servers through a vpn, which prevents management tools being exposed to the internet. Some of the services I run are exposed to the internet, but through a reverse proxy for added security. I've set up this reverse proxy with Nginx , which is quite simple and allows https.","title":"Managing"},{"location":"servers/jellyfin/","text":"Jellyfin Jellyfin is a media server which allows you to stream all your downloaded media. I use it to stream movies and series I have","title":"Jellyfin"},{"location":"servers/jellyfin/#jellyfin","text":"Jellyfin is a media server which allows you to stream all your downloaded media. I use it to stream movies and series I have","title":"Jellyfin"},{"location":"servers/nginx/","text":"Nginx Nginx (pronounced engine-x) is a web server and reverse proxy, which I use to proxy my servers from my homelab. Installation To set up nginx, you first need to install the nginx package. This package is probably just named nginx on most distros, but check it for yourself. To install Nginx on Debian, just use the following command: sudo apt install nginx On installing the package, a systemd service is started with nginx, so you can go on to configuring your reverse proxy. Configuration To configure a reverse proxy with nginx, you need to add a file to the conf.d directory. This can be done as follows: sudo nano /etc/nginx/conf.d/example.conf Note: In some tutorials the sites-available directory is used, this isn't a directory that is available on all distros, so use conf.d for distro-agnostic installations. You can name this file whatever you want, I mostly name them after the services they proxy. To configure your proxy you have to enter some lines to your file: server { listen 80; listen [::]:80; server_name subdomain.domain.tld location / { proxy_pass https://192.168.x.x:0000 proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"upgrade\"; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header X-Forwarded-Host $host; proxy_set_header X-Forwarded-Port $server_port; } } Within this configuration, you have to adjust some parameters. First, you need to adjust your server_name to whatever domain or subdomain you have or want. You also need to adjust the proxy_pass to the local ip and port of the server you want to proxy. You can keep the other things the same, this needs to be added to every proxy. After configuring the reverse proxy, you can check the config and restarting nginx by running sudo nginx -t sudo systemctl restart nginx After restarting, you'd probably want to add an ssl certificate to use https on your proxy. This can be done easily and free with let's encrypt. Before you do that, however, you'd want to add an A record to your domain name. Domain name To add a record to your domain name, go to your domain name provider and add an A record in the dns settings. This A record should point to your public IP and have the same domain name as you configured. You probably should also add an SRV record to point to the correct port, which can be somewhat different for different providers, so reference their documentation on that. SSL certificate To install let's encrypt on Debian, you can just use the following commands (check the package name for your distro): sudo apt install certbot python-certbot-nginx To acquire the certificate for the domain name you just chose for the reverse proxy you just need to run the following command: sudo certbot --nginx -d subdomain.domain.tld When running this you need to enter some information, after which your certificate will be set up. Set up cronjob Certbot certificates expire every 90 days, so I always set up a cronjob to refresh my certificates. This is quite easy to do, just open the crontab file by entering: crontab -e Within the file enter the following line: 0 24 * * * /usr/bin/certbot renew --quiet This line runs the command every 24 hours, and causes no extra output thanks to the --quiet flag.","title":"Nginx"},{"location":"servers/nginx/#nginx","text":"Nginx (pronounced engine-x) is a web server and reverse proxy, which I use to proxy my servers from my homelab.","title":"Nginx"},{"location":"servers/nginx/#installation","text":"To set up nginx, you first need to install the nginx package. This package is probably just named nginx on most distros, but check it for yourself. To install Nginx on Debian, just use the following command: sudo apt install nginx On installing the package, a systemd service is started with nginx, so you can go on to configuring your reverse proxy.","title":"Installation"},{"location":"servers/nginx/#configuration","text":"To configure a reverse proxy with nginx, you need to add a file to the conf.d directory. This can be done as follows: sudo nano /etc/nginx/conf.d/example.conf Note: In some tutorials the sites-available directory is used, this isn't a directory that is available on all distros, so use conf.d for distro-agnostic installations. You can name this file whatever you want, I mostly name them after the services they proxy. To configure your proxy you have to enter some lines to your file: server { listen 80; listen [::]:80; server_name subdomain.domain.tld location / { proxy_pass https://192.168.x.x:0000 proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"upgrade\"; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header X-Forwarded-Host $host; proxy_set_header X-Forwarded-Port $server_port; } } Within this configuration, you have to adjust some parameters. First, you need to adjust your server_name to whatever domain or subdomain you have or want. You also need to adjust the proxy_pass to the local ip and port of the server you want to proxy. You can keep the other things the same, this needs to be added to every proxy. After configuring the reverse proxy, you can check the config and restarting nginx by running sudo nginx -t sudo systemctl restart nginx After restarting, you'd probably want to add an ssl certificate to use https on your proxy. This can be done easily and free with let's encrypt. Before you do that, however, you'd want to add an A record to your domain name.","title":"Configuration"},{"location":"servers/nginx/#domain-name","text":"To add a record to your domain name, go to your domain name provider and add an A record in the dns settings. This A record should point to your public IP and have the same domain name as you configured. You probably should also add an SRV record to point to the correct port, which can be somewhat different for different providers, so reference their documentation on that.","title":"Domain name"},{"location":"servers/nginx/#ssl-certificate","text":"To install let's encrypt on Debian, you can just use the following commands (check the package name for your distro): sudo apt install certbot python-certbot-nginx To acquire the certificate for the domain name you just chose for the reverse proxy you just need to run the following command: sudo certbot --nginx -d subdomain.domain.tld When running this you need to enter some information, after which your certificate will be set up.","title":"SSL certificate"},{"location":"servers/nginx/#set-up-cronjob","text":"Certbot certificates expire every 90 days, so I always set up a cronjob to refresh my certificates. This is quite easy to do, just open the crontab file by entering: crontab -e Within the file enter the following line: 0 24 * * * /usr/bin/certbot renew --quiet This line runs the command every 24 hours, and causes no extra output thanks to the --quiet flag.","title":"Set up cronjob"}]}